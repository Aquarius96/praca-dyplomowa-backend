// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PracaDyplomowaBackend.Repo;

namespace PracaDyplomowaBackend.Repo.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190112110140_AddAuthorDescription")]
    partial class AddAuthorDescription
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PracaDyplomowaBackend.Data.DbModels.Comment.AuthorComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Added");

                    b.Property<int>("AuthorId");

                    b.Property<string>("Content");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("UserId");

                    b.ToTable("AuthorComments");
                });

            modelBuilder.Entity("PracaDyplomowaBackend.Data.DbModels.Comment.BookComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Added");

                    b.Property<int>("BookId");

                    b.Property<string>("Content");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("BookComments");
                });

            modelBuilder.Entity("PracaDyplomowaBackend.Data.DbModels.Common.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BirthCity");

                    b.Property<string>("BirthCountry");

                    b.Property<bool>("Confirmed");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<DateTime>("DateOfDeath");

                    b.Property<string>("Description");

                    b.Property<string>("Firstname");

                    b.Property<string>("Gender");

                    b.Property<string>("Lastname");

                    b.Property<string>("PhotoUrl");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new { Id = 1, Confirmed = false, DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfDeath = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Firstname = "Andrzej", Gender = "mężczyzna", Lastname = "Sapkowski", PhotoUrl = "https://iupac.org/cms/wp-content/uploads/2018/05/default-avatar.png" },
                        new { Id = 2, Confirmed = false, DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfDeath = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Firstname = "Arthur Conan", Gender = "mężczyzna", Lastname = "Doyle", PhotoUrl = "https://iupac.org/cms/wp-content/uploads/2018/05/default-avatar.png" },
                        new { Id = 3, Confirmed = false, DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), DateOfDeath = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Firstname = "John Ronald Reuel", Gender = "mężczyzna", Lastname = "Tolkien", PhotoUrl = "https://iupac.org/cms/wp-content/uploads/2018/05/default-avatar.png" }
                    );
                });

            modelBuilder.Entity("PracaDyplomowaBackend.Data.DbModels.Common.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Added");

                    b.Property<bool>("Confirmed");

                    b.Property<string>("Description");

                    b.Property<int>("PagesCount");

                    b.Property<string>("PhotoUrl");

                    b.Property<DateTime>("Released");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new { Id = 1, Added = new DateTime(2019, 1, 12, 11, 1, 39, 565, DateTimeKind.Utc), Confirmed = false, Description = "Jedyne w Polsce wydanie zawierające wszystkie opowiadania i nowele Arthura Conan Doyle’a o detektywie wszech czasów.", PagesCount = 1108, PhotoUrl = "https://iupac.org/cms/wp-content/uploads/2018/05/default-avatar.png", Released = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Title = "Księga wszystkich dokonań Sherlocka Holmesa" },
                        new { Id = 2, Added = new DateTime(2019, 1, 12, 11, 1, 39, 566, DateTimeKind.Utc), Confirmed = false, Description = "Pierwsza część sagi o wiedźminie Geralcie z Rivii.", PagesCount = 332, PhotoUrl = "https://iupac.org/cms/wp-content/uploads/2018/05/default-avatar.png", Released = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Title = "Ostatnie życzenie" },
                        new { Id = 3, Added = new DateTime(2019, 1, 12, 11, 1, 39, 566, DateTimeKind.Utc), Confirmed = false, Description = "Pełne magii i przygód wspaniałe preludium do „Władcy Pierścieni”.", PagesCount = 304, PhotoUrl = "https://iupac.org/cms/wp-content/uploads/2018/05/default-avatar.png", Released = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Title = "Hobbit" }
                    );
                });

            modelBuilder.Entity("PracaDyplomowaBackend.Data.DbModels.Common.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Added");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("Password");

                    b.Property<string>("PhotoUrl");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = new Guid("3f38fcb6-fd6e-43c9-d30b-08d6119ae085"), Added = new DateTime(2019, 1, 12, 11, 1, 39, 564, DateTimeKind.Utc), EmailAddress = "aquarius96@wp.pl", Password = "AQAAAAEAACcQAAAAELo43AUBrHAT76Rmf5YUHxiy51bN30zu1V7mMPGHIcdHV33n1GtuV0Vh7Hnzn0HqfA==", PhotoUrl = "https://iupac.org/cms/wp-content/uploads/2018/05/default-avatar.png", Username = "Administrator" }
                    );
                });

            modelBuilder.Entity("PracaDyplomowaBackend.Data.DbModels.Genre.AuthorGenre", b =>
                {
                    b.Property<int>("GenreId");

                    b.Property<int>("AuthorId");

                    b.HasKey("GenreId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("AuthorGenres");

                    b.HasData(
                        new { GenreId = 1, AuthorId = 1 },
                        new { GenreId = 1, AuthorId = 3 },
                        new { GenreId = 2, AuthorId = 2 }
                    );
                });

            modelBuilder.Entity("PracaDyplomowaBackend.Data.DbModels.Genre.BookGenre", b =>
                {
                    b.Property<int>("GenreId");

                    b.Property<int>("BookId");

                    b.HasKey("GenreId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookGenres");

                    b.HasData(
                        new { GenreId = 2, BookId = 1 },
                        new { GenreId = 1, BookId = 2 },
                        new { GenreId = 1, BookId = 3 }
                    );
                });

            modelBuilder.Entity("PracaDyplomowaBackend.Data.DbModels.Genre.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new { Id = 1, Name = "fantasy" },
                        new { Id = 2, Name = "kryminał" }
                    );
                });

            modelBuilder.Entity("PracaDyplomowaBackend.Data.DbModels.Library.CurrentlyReadBook", b =>
                {
                    b.Property<int>("BookId");

                    b.Property<Guid>("UserId");

                    b.HasKey("BookId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CurrentlyReadBooks");
                });

            modelBuilder.Entity("PracaDyplomowaBackend.Data.DbModels.Library.FavoriteAuthor", b =>
                {
                    b.Property<int>("AuthorId");

                    b.Property<Guid>("UserId");

                    b.HasKey("AuthorId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteAuthors");
                });

            modelBuilder.Entity("PracaDyplomowaBackend.Data.DbModels.Library.FavoriteBook", b =>
                {
                    b.Property<int>("BookId");

                    b.Property<Guid>("UserId");

                    b.HasKey("BookId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteBooks");
                });

            modelBuilder.Entity("PracaDyplomowaBackend.Data.DbModels.Library.ReadBook", b =>
                {
                    b.Property<int>("BookId");

                    b.Property<Guid>("UserId");

                    b.Property<DateTime>("Finished");

                    b.HasKey("BookId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ReadBooks");
                });

            modelBuilder.Entity("PracaDyplomowaBackend.Data.DbModels.Library.WantedBook", b =>
                {
                    b.Property<int>("BookId");

                    b.Property<Guid>("UserId");

                    b.HasKey("BookId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("WantedBooks");
                });

            modelBuilder.Entity("PracaDyplomowaBackend.Data.DbModels.Rate.AuthorRate", b =>
                {
                    b.Property<int>("AuthorId");

                    b.Property<Guid>("UserId");

                    b.Property<int>("Value");

                    b.HasKey("AuthorId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AuthorRates");
                });

            modelBuilder.Entity("PracaDyplomowaBackend.Data.DbModels.Rate.BookRate", b =>
                {
                    b.Property<int>("BookId");

                    b.Property<Guid>("UserId");

                    b.Property<int>("Value");

                    b.HasKey("BookId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("BookRates");
                });

            modelBuilder.Entity("PracaDyplomowaBackend.Data.DbModels.Rate.BookReviewRate", b =>
                {
                    b.Property<int>("BookReviewId");

                    b.Property<Guid>("UserId");

                    b.Property<bool>("Positive");

                    b.HasKey("BookReviewId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ReviewRates");
                });

            modelBuilder.Entity("PracaDyplomowaBackend.Data.DbModels.Relations.BookAuthor", b =>
                {
                    b.Property<int>("BookId");

                    b.Property<int>("AuthorId");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BookAuthors");

                    b.HasData(
                        new { BookId = 1, AuthorId = 2 },
                        new { BookId = 2, AuthorId = 1 },
                        new { BookId = 3, AuthorId = 3 }
                    );
                });

            modelBuilder.Entity("PracaDyplomowaBackend.Data.DbModels.Relations.BookReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Added");

                    b.Property<int>("BookId");

                    b.Property<bool>("Confirmed");

                    b.Property<string>("Content");

                    b.Property<string>("Title");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("BookReviews");
                });

            modelBuilder.Entity("PracaDyplomowaBackend.Data.DbModels.Role.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, Name = "administrator" },
                        new { Id = 2, Name = "user" }
                    );
                });

            modelBuilder.Entity("PracaDyplomowaBackend.Data.DbModels.Role.UserRole", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserRoles");

                    b.HasData(
                        new { UserId = new Guid("3f38fcb6-fd6e-43c9-d30b-08d6119ae085"), RoleId = 1 }
                    );
                });

            modelBuilder.Entity("PracaDyplomowaBackend.Data.DbModels.Comment.AuthorComment", b =>
                {
                    b.HasOne("PracaDyplomowaBackend.Data.DbModels.Common.Author", "Author")
                        .WithMany("AuthorComments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PracaDyplomowaBackend.Data.DbModels.Common.User", "User")
                        .WithMany("AuthorComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PracaDyplomowaBackend.Data.DbModels.Comment.BookComment", b =>
                {
                    b.HasOne("PracaDyplomowaBackend.Data.DbModels.Common.Book", "Book")
                        .WithMany("BookComments")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PracaDyplomowaBackend.Data.DbModels.Common.User", "User")
                        .WithMany("BookComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PracaDyplomowaBackend.Data.DbModels.Genre.AuthorGenre", b =>
                {
                    b.HasOne("PracaDyplomowaBackend.Data.DbModels.Common.Author", "Author")
                        .WithMany("AuthorGenres")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PracaDyplomowaBackend.Data.DbModels.Genre.Genre", "Genre")
                        .WithMany("AuthorGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PracaDyplomowaBackend.Data.DbModels.Genre.BookGenre", b =>
                {
                    b.HasOne("PracaDyplomowaBackend.Data.DbModels.Common.Book", "Book")
                        .WithMany("BookGenres")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PracaDyplomowaBackend.Data.DbModels.Genre.Genre", "Genre")
                        .WithMany("BookGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PracaDyplomowaBackend.Data.DbModels.Library.CurrentlyReadBook", b =>
                {
                    b.HasOne("PracaDyplomowaBackend.Data.DbModels.Common.Book", "Book")
                        .WithMany("CurrentlyReadBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PracaDyplomowaBackend.Data.DbModels.Common.User", "User")
                        .WithMany("CurrentlyReadBooks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PracaDyplomowaBackend.Data.DbModels.Library.FavoriteAuthor", b =>
                {
                    b.HasOne("PracaDyplomowaBackend.Data.DbModels.Common.Author", "Author")
                        .WithMany("FavoriteAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PracaDyplomowaBackend.Data.DbModels.Common.User", "User")
                        .WithMany("FavoriteAuthors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PracaDyplomowaBackend.Data.DbModels.Library.FavoriteBook", b =>
                {
                    b.HasOne("PracaDyplomowaBackend.Data.DbModels.Common.Book", "Book")
                        .WithMany("FavoriteBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PracaDyplomowaBackend.Data.DbModels.Common.User", "User")
                        .WithMany("FavoriteBooks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PracaDyplomowaBackend.Data.DbModels.Library.ReadBook", b =>
                {
                    b.HasOne("PracaDyplomowaBackend.Data.DbModels.Common.Book", "Book")
                        .WithMany("ReadBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PracaDyplomowaBackend.Data.DbModels.Common.User", "User")
                        .WithMany("ReadBooks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PracaDyplomowaBackend.Data.DbModels.Library.WantedBook", b =>
                {
                    b.HasOne("PracaDyplomowaBackend.Data.DbModels.Common.Book", "Book")
                        .WithMany("WantedBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PracaDyplomowaBackend.Data.DbModels.Common.User", "User")
                        .WithMany("WantedBooks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PracaDyplomowaBackend.Data.DbModels.Rate.AuthorRate", b =>
                {
                    b.HasOne("PracaDyplomowaBackend.Data.DbModels.Common.Author", "Author")
                        .WithMany("AuthorRates")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PracaDyplomowaBackend.Data.DbModels.Common.User", "User")
                        .WithMany("AuthorRates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PracaDyplomowaBackend.Data.DbModels.Rate.BookRate", b =>
                {
                    b.HasOne("PracaDyplomowaBackend.Data.DbModels.Common.Book", "Book")
                        .WithMany("BookRates")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PracaDyplomowaBackend.Data.DbModels.Common.User", "User")
                        .WithMany("BookRates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PracaDyplomowaBackend.Data.DbModels.Rate.BookReviewRate", b =>
                {
                    b.HasOne("PracaDyplomowaBackend.Data.DbModels.Relations.BookReview", "BookReview")
                        .WithMany("ReviewRates")
                        .HasForeignKey("BookReviewId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PracaDyplomowaBackend.Data.DbModels.Common.User", "User")
                        .WithMany("ReviewRates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PracaDyplomowaBackend.Data.DbModels.Relations.BookAuthor", b =>
                {
                    b.HasOne("PracaDyplomowaBackend.Data.DbModels.Common.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PracaDyplomowaBackend.Data.DbModels.Common.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PracaDyplomowaBackend.Data.DbModels.Relations.BookReview", b =>
                {
                    b.HasOne("PracaDyplomowaBackend.Data.DbModels.Common.Book", "Book")
                        .WithMany("BookReviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PracaDyplomowaBackend.Data.DbModels.Common.User", "User")
                        .WithMany("BookReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PracaDyplomowaBackend.Data.DbModels.Role.UserRole", b =>
                {
                    b.HasOne("PracaDyplomowaBackend.Data.DbModels.Role.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PracaDyplomowaBackend.Data.DbModels.Common.User", "User")
                        .WithOne("UserRole")
                        .HasForeignKey("PracaDyplomowaBackend.Data.DbModels.Role.UserRole", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
